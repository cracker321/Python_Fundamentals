# < 2차원 리스트 >
'''
- 2차원 리스트는 리스트 안에 또 다른 리스트가 들어있는 형태를 가진 자료형.
- 행(row)과 열(column)로 구성되어 있으며, 각 원소는 행과 열의 인덱스로 접근할 수 있음.
- e.g) 2개의 행(내부 리스트의 개수)과 5개의 열(내부 리스트의 원소의 개수)로 구성된 2차원 리스트
  a = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]
  
  a[0][0]은 1행 1열에 해당되는 원소를 나타냄
  a[2][4]는 3행 5열에 해당되는 원소를 나타냄
'''

'''
< 행렬의 곱셈 matrix multiplication >

- 행렬의 곱셈은 여타 행렬의 연산과 같이, '크기가 맞는 경우'에만 할 수 있음. 
  '크기가 맞는다'는 것은, '앞 행렬의 열의 수(아래에서 행렬 A의 k값)'와 '뒤 행렬의 행의 수(아래에서 행렬 B의 k값)'이 같을 때이다.
- 곱셈 결과 나오는 행렬의 크기는 '(앞 행렬의 열의 수 m) X (뒤 행렬의 행의 수 n)', 즉 'm X n' 이다.

행렬 A = m X k 
행렬 B = k X n


'''

# < 예제 : 출력하는 방법 >

my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print(my_list[0][2]) # 출력값: 3
                     # 큰 덩이묶음의 인덱스 0번 속의 개별원소 인덱스 2번.
print(my_list[2][1]) # 출력값: 8
                     # 큰 덩이묶음의 인덱스 2번 속의 개별원소 인덱스 1번



# < ex1) 2차원 리스트의 모든 원소 출력하기 >
a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
for row in a:
    for elem in row:
        print(elem, end=" ")
    print()
    

# < 2차원 리스트에서의 반복문 >
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


'''
- 2차원 리스트의 행의 개수: len(matrix) 
- 2차원 리스트의 열의 개수: len(matix[0])


'''

    
# < ex2) 2차원 리스트의 행렬 원소 곱셈하기 >

A = [[1, 2], [3, 4], [5, 6]] # 3 X 2 행렬
B = [[7, 8], [9, 10]] #  2 X 2 행렬
# 행렬 A X 행렬 B = 3 X 2 행렬이 나온다. 
 
result = [[0, 0], [0, 0], [0, 0]] # 결괏값을 저장할 행렬 초기화. Setting the initial value of the variable 

for i in range(len(A)): # 행렬 A의 '행의 개수(= len(A))'만큼 반복하며,
    for j in range(len(B[0])): # 행렬 B의 '열의 개수(= len(B[0]))'만큼 반복함.
    # 여기까지 위 두 반복문은, result[i][j]에 대응되는 '행렬 A의 행 i'와 '행렬 B의 열 j'에 대한 값을 계산하는 것임
        for k in range(len(A[0])): # len(A[0]) 대신 len(B) 써도 됨! 결과 동일!
            '''
            행렬 A = m X k 
            행렬 B = k X n
            에서 'k'를 사용하는 반복문.
            여기서 'k'는 당연히 '행렬 A의 '열 길이'인 'len(A[0])''를 사용해도 되고, '행렬 B의 '행 길이'인 'len(B)''를 사용해도 똑같음.
            
            '행렬 A의 각 행'과 '행렬 B의 각 열'을 '곱한 결과'를 'result'에 누적해주는 역할
            즉, '행렬 A의 i행'과 '행렬 B의 j열'에 대한 곱셈을 수행하는 반복문. 즉, A[i][k]와 B[k][j]를 곱한 값을 누적하여 result[i][j]에 저장함
            '''
            
            result[i][j] += A[i][k]*B[k][j] 
            '''
            - i와 j는 각각 곱셈결과행렬 C의 행과 열 인덱스를 나타냄
            - k는 행렬 A의 열 인덱스와 동시에 행렬 B의 행 인덱스를 나타냄
            '''

for row in result: 
    print(row)
    '''
    '2차원 리스트 result'의 개별 행렬의 각 행을 순회하며(result의 개별 원소(=행 인덱스 하나, 열 인덱스 하나. 즉, 예로 [25, 28]의 한 묶음)인 한 행씩 row에 넣어보고), 
    해당 행의 각 원소를 한 줄씩 출력함(그 row를 출력).
    
    즉, 그냥 'print(result)'로 했을 때의 출력값은 '[[25, 28], [57, 64], [89, 100]] 이지만
    여기서 for문 사용하면 그 출력값이
    25 28
    57 64
    89 100 
    이 되는 것이다!
    
    '''
# print(result)       
    
    