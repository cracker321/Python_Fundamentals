# [ 튜플 자료형 ]

'''
# 튜플은 몇 가지 점을 제외하고는 리스트와 거의 비슷
  - 리스트와 튜플 모두 그 원소로 문자열, 숫자, 문자 등을 다 함께 섞어서 하나의 리스트, 튜플로 포함시켜 만들 수 있다. 
    e.g) my_list = [ "apple", 3, "banana", 7 ]
         my_tuple = ( "apple", 3, "banana", 7)
  -  리스트와 튜플 모두 그 원소로 각각 (다른) 리스트와 튜플을 포함할 수 있음.
     e.g) my_list = [ 1, 2, [5, 4, 3], 6, [7, 10, 4]] 
          my_tuple = ( 'a', 'b', ('ab', 'cd'))
  
  - 리스트는 []를 사용하여 원소들을 둘러싸지만, 튜플은 ()을 사용하여 원소들을 둘러싼다.
  - 리스트는 내부 원소 값의 생성, 수정, 삭제가 가능하지만, 튜플은 원소 값을 바꿀 수 없음.
    튜플은 한 번 생성된 원소값을 변경할 수 없기에, 불변(immutable)한 자료형임
  - 여러 개의 값을 한 번에 묶어서 처리할 수 있기에 함수에서 유용하게 사용할 수 있음.
'''

t1 = () # 빈 튜플 생성
t2 = (1, ) # '1개의 원소만 가질 때'에는, '반드시' 그 원소 뒤에 '콤마(,)'를 붙여야 함.
t3 = (1, 2, 3)
t4 = 1, 2, 3 # '괄호()를 생략'해도 된다! 즉, t3 = t4 임
t5 = ('a', 'b', ('ab', 'cd')) # 문자열 입력할 때는 당연히 파이썬 문법대로 따옴표(or쌍따옴표)를 사용한다.

 
# < 원소값을 삭제할 때: 에러발생. 왜냐하면, 튜플은 그 원소를 삭제할 수 없기 때문이다! >
t1 = (1, 2, 'a', 'b')
# del t1[0] # 튜플은 원소값을 삭제할 수 없다!


# < 원소값을 변경할 때: 에러발생. 튜플은 그 원소를 변경할 수 없기 때문이다! >
t1  = (1, 2, 'a', 'b')
# t1[0] = 'c' # 튜플은 원소값을 변경할 수 없다!


# < 튜플의 인덱싱: 원소에 접근하는 것 >. 너무 당연함..
my_tuple = ('apple', 55, 'orange', '유종')
print(my_tuple[2]) # 출력값: 'orange'


# < 튜플의 슬라이싱: 튜플 원소들 중 일부 요소들에 범위를 지정하여 접근하는 것 >
my_tuple = ('mango', 'banana', '코딩', '잘하자', '요요요', '성공', '합시다', '아자아자') # 인덱스0 ~ 인덱스7 까지 존재함.
print(my_tuple[2:5]) # 인덱스2 ~ 인덱스4 까지 범위의 원소값 출력. 단, 끝 인덱스5 는 절대 포함되지 않는다!
                     # 출력값: ('코딩', '잘하자', '요요요')
print(my_tuple[5:8]) # 출력값: '성공', '합시다', '아자아자'. '8'을 입력해야 인덱스7이 출력되기 때문에, 8을 입력해야 함.


# < 튜플의 슬라이싱 - 역순: '음수 인덱스'를 사용하여 끝 인덱스 원소에서부터 역순으로 접근 >
# - 가장 끝 마지막 원소는 '인덱스 -1'이 된다.
print(my_tuple[-1]) # 출력값: '아자아자'
print(my_tuple[-4]) # 출력값: '요요요'


# < 튜플의 슬라이싱 - 시작 인덱스와 끝 인덱스 생략하기 >
print(my_tuple[:3]) # 인덱스0 ~ 인덱스2 까지 범위의 원소값 출력. 인덱스0 입력하는 것을 생략함
                    # 출력값: 'mango', 'banana', '코딩
print(my_tuple[3:]) # 인덱스3 ~ 끝 인덱스 까지 범위의 원소값 출력.
print(my_tuple[:]) # 처음 ~ 끝 까지 범위의 원소값 전체 출력.


# < 튜플의 더하기 >
t1 = (1, 2, 'a', 'b')
t2 = (3, 4)
t3 = t1 + t2
print(t3) # 출력값: (1, 2, 'a', 'b', 3, 4)


# < 튜플의 곱하기(=해당 튜플의 원소들을 n번 반복해서 나열해주는 것) >
t1 = (5, 9)
t2 = t1 * 3
print(t2) # 출력값: (5, 9, 5, 9, 5, 9)


# < 튜플의 길이 구하기 >
t1 = (3, 7, 'a', 'b', ('c', 'd', 'e'))
print(len(t1))